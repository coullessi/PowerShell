name: PowerShell Module CI

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: windows-latest
    
    strategy:
      matrix:
        powershell-version: ['5.1', '7.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PowerShell ${{ matrix.powershell-version }}
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $PSVersionTable
        azPSVersion: latest
      if: matrix.powershell-version == '7.x'
    
    - name: Install required modules
      shell: pwsh
      run: |
        Install-Module -Name Az.Accounts -Force -Scope CurrentUser
        Install-Module -Name Az.Resources -Force -Scope CurrentUser
        Install-Module -Name Pester -Force -Scope CurrentUser
    
    - name: Import module
      shell: pwsh
      run: |
        Import-Module .\ServerProtection.psd1 -Force
        Get-Module ServerProtection
    
    - name: Run module tests
      shell: pwsh
      run: |
        # Run basic module import tests
        $module = Get-Module ServerProtection
        if (-not $module) {
          throw "Module failed to import"
        }
        
        # Check exported functions
        $expectedFunctions = @(
          'Start-ServerProtection',
          'Get-AzureArcPrerequisite', 
          'New-AzureArcDevice',
          'Get-AzureArcDiagnostic',
          'Set-AzureArcResourcePricing'
        )
        
        $exportedFunctions = $module.ExportedFunctions.Keys
        foreach ($func in $expectedFunctions) {
          if ($func -notin $exportedFunctions) {
            throw "Function $func not found in exported functions"
          }
        }
        
        Write-Host "All expected functions are exported successfully"
    
    - name: Run syntax validation
      shell: pwsh
      run: |
        # Check PowerShell syntax for all .ps1 files
        Get-ChildItem -Recurse -Filter "*.ps1" | ForEach-Object {
          $content = Get-Content $_.FullName -Raw
          $errors = $null
          $null = [System.Management.Automation.PSParser]::Tokenize($content, [ref]$errors)
          if ($errors) {
            Write-Error "Syntax errors in $($_.FullName): $($errors -join ', ')"
            throw "Syntax validation failed"
          }
        }
        Write-Host "Syntax validation passed for all PowerShell files"

  security-scan:
    runs-on: windows-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run PSScriptAnalyzer
      shell: pwsh
      run: |
        Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser
        
        # Run PSScriptAnalyzer on all PowerShell files
        $results = Invoke-ScriptAnalyzer -Path . -Recurse -ReportSummary
        
        if ($results) {
          Write-Host "PSScriptAnalyzer found the following issues:"
          $results | Format-Table
          
          # Count severity levels
          $errors = ($results | Where-Object Severity -eq 'Error').Count
          $warnings = ($results | Where-Object Severity -eq 'Warning').Count
          
          Write-Host "Errors: $errors, Warnings: $warnings"
          
          # Fail build on errors (but allow warnings)
          if ($errors -gt 0) {
            throw "PSScriptAnalyzer found $errors error(s)"
          }
        } else {
          Write-Host "PSScriptAnalyzer found no issues"
        }
